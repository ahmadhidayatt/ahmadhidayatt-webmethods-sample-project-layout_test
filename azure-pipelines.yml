trigger:
- main

variables:
- group: SAG_SETTINGS
- name: PROJECT_NAME
  value: $(Build.DefinitionName)

pool:
  name: Default  # self-hosted Windows agent

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - checkout: self

    - script: |
        call "%SAG_HOME%\common\lib\ant\bin\ant" ^
          -DSAGHome=%SAG_HOME% ^
          -DSAG_CI_HOME=%SAG_CI_HOME% ^
          -DprojectName=%PROJECT_NAME% build ^
          -Dbuild.dir=$(System.DefaultWorkingDirectory)\target ^
      displayName: 'Build with Ant'

    - publish: '$(System.DefaultWorkingDirectory)/target/$(PROJECT_NAME)/build'
      artifact: BuildOutput
      displayName: 'Publish Build Artifacts'

- stage: Deploy
  dependsOn: Build
  jobs:
  - job: DeployJob
    steps:
    - download: current
      artifact: BuildOutput
      displayName: 'Download Build Artifacts'

    - script: |
        echo Copying artifact to expected build path...
        set TARGET_BUILD_PATH=$(System.DefaultWorkingDirectory)\target\$(PROJECT_NAME)\build
        mkdir "%TARGET_BUILD_PATH%" 2>nul
        xcopy /E /I /Y "$(Pipeline.Workspace)\BuildOutput\*" "%TARGET_BUILD_PATH%"
      displayName: 'Copy Artifacts to Target Build Folder'

    - script: |
        echo === Verifying build contents ===
        dir "$(System.DefaultWorkingDirectory)\target\$(PROJECT_NAME)\build" /s
      displayName: 'Verify Build Folder Content'

    - script: |
        call "%SAG_HOME%\common\lib\ant\bin\ant" ^
          -DSAGHome=%SAG_HOME% ^
          -DSAG_CI_HOME=%SAG_CI_HOME% ^
          -DprojectName=%PROJECT_NAME% deploy
      displayName: 'Deploy with Ant'


- stage: Test
  dependsOn: Deploy
  jobs:
  - job: TestJob
    steps:
    - script: |
        call "%SAG_HOME%\common\lib\ant\bin\ant" ^
          -DSAGHome=%SAG_HOME% ^
          -DSAG_CI_HOME=%SAG_CI_HOME% ^
          -DprojectName=%PROJECT_NAME% test
      displayName: 'Test with Ant'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/report/*.xml'
        failTaskOnFailedTests: true
      displayName: 'Publish JUnit Test Results'
